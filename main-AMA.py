import classes


def guidelines():
    """
    Το παιχνίδι ξεκινά με το κεντρικό μενού, όπου παρουσιάζονται 4 επιλογές για τον παίκτη.

    ΕΠΙΛΟΓΗ 1.ΠΑΙΧΝΙΔΙ:
    Ξεκινά μια καινούργια παρτίδα με αντίπαλο τον υπολογιστή. Σε κάθε γύρο αφαιρούνται επτά γράμματα από το σακουλάκι
    του παιχνιδιού και ο παίκτης ή ο υπολογιστής προσπαθεί να σχηματίσει μία λέξη με τα γράμματα. Αν ο παίκτης παίξει
    μια άκυρη λέξη δηλαδή λέξη που δεν σχηματίζεται με τα υπάρχοντα γράμματα χάνει τον γύρο του και παίρνει 0 πόντους. Αν
    παίξει μια έγκυρη λέξη τότε το σύστημα αναζητεί μέσα από το λεξικό worddic.json αν υπάρχει, και αν ναι, τότε
    υπολογίζει τους πόντους και τους προσθέτει στο τελικό σκορ. Το παιχνίδι συνεχίζεται εναλλάξ μέχρι να τελειώσουν τα
    γράμματα, κάποιος παραιτηθεί ή ο υπολογιστής δεν μπόρεσε να βρει λέξη να παίξει οπότε νικητής είναι ο παίκτης.
     Στο τέλος εμφανίζονται τα σκορ και ανακηρύσσεται ο νικητής.

    ΕΠΙΛΟΓΗ 2.ΣΚΟΡ
    Η επιλογή αυτή εμφανίζει διάφορα χρήσιμα στατιστικά από προηγούμενες παρτίδες. Αναλυτικά εμφανίζει το καλύτερο σκορ
    του παίκτη, το ποσοστό νικών/ηττών, τον μέσο όρο πόντων ανά παιχνίδι και στο τέλος όλες τις προηγούμενες παρτίδες με
    αναλυτικά αποτελέσματα και την ημέρα και ώρα που αυτές πραγματοποιήθηκαν. Για τα δεδομένα αυτά χρησιμοποιήθηκε η
    βάση δεδομένων sqlite3.

    ΕΠΙΛΟΓΗ 3.ΡΥΘΜΙΣΕΙΣ:
    Εδώ μπορεί ο παίκτης να διαλέξει το επίπεδο δυσκολίας με αντίπαλο τον υπολογιστή. Υπάρχουν 3 επίπεδα δυσκολίας. Το
    εύκολο επίπεδο πραγματοποιεί τον αλγόριθμο min όπου ο υπολογιστής παίζει πάντα την λέξη με το μικρότερο σκορ. Το
    μέτριο επίπεδο πραγματοποιεί τον αλγόριθμο fail όπου προσπαθεί να προσομοιώσει την ανθρώπινη λογική. Περισσότερες
    πληροφορίες για τον fail αλγόριθμο help(classes.Computer.fail_algorithm). Στο δύσκολο επίπεδο ο αλγόριθμος παίζει
    πάντα την λέξη με το μεγαλύτερο σκορ.

    ΕΠΙΛΟΓΗ Q.ΕΞΟΔΟΣ
    Τερματίζει το πρόγραμμα.

    ΤΕΧΝΙΚΕΣ ΛΕΠΤΟΜΕΡΕΙΕΣ ΚΑΙ ΤΕΧΝΟΛΟΓΙΕΣ:
    Η συγγραφή του κώδικα python ακολουθεί το στυλ και τις οδηγίες όπως ορίστηκαν από PEP 8. Πληροφορίες στην
    ιστοσελίδα https://www.python.org/dev/peps/pep-0008/ (annotations decorators).
    Χρησιμοποιείται η built-in βιβλιοθήκη json για την αλληλεπίδραση με το λεξικό.
    Χρησιμοποιείται η built-in βιβλιοθήκη sqlite για την αποθήκευση δεδομένων (database)
    Χρησιμοποιείται η built-in βιβλιοθήκη datetime για την επεξεργασία ημερομηνίας και ώρας
    Χρησιμοποιείται η built-in βιβλιοθήκη random για παραγωγή ψευδο-τυχαίων αριθμών

    ΑΡΧΕΙΑ ΠΡΟΓΡΑΜΜΑΤΟΣ:
    classes.py
    main-AMA.py
    worddic.json
    database.db
    """


is_running = True
# Default algorithm 'fail'
level = "fail"

while is_running:
    print("-----------------------------------")
    print("********** SCRABBLE ************** ")
    print("-----------------------------------")
    print("1: ΠΑΙΧΝΙΔΙ")
    print("2: ΣΚΟΡ")
    print("3: ΡΥΘΜΙΣΕΙΣ")
    print("q: ΕΞΟΔΟΣ")
    print("-----------------------------------")
    choice = input()

    if choice == '1':
        game = classes.Game()
        game.setup(level)
        print("ΤΟ ΠΑΙΧΝΙΔΙ ΞΕΚΙΝΑΕΙ")
        print("ΔΥΣΚΟΛΙΑ: " + level)
        game.run()
    elif choice == '2':
        scores = classes.Score()
        print("High Score: " + str(scores.best_score()))
        print("Win rate: " + str(round(scores.won_rate())) + "%")
        print("Average Points: " + str(round(scores.calculate_average())) + " points per game")
        print("-------ΠΡΟΗΓΟΥΜΕΝΑ ΠΑΙΧΝΙΔΙΑ--------")
        scores.print_all()
    elif choice == '3':
        print("1: ΕΥΚΟΛΟ")
        print("2: ΜΕΤΡΙΟ")
        print("3: ΔΥΣΚΟΛΟ")
        choice = input()
        if choice == '1':
            level = "min"
        if choice == '2':
            level = "fail"
        if choice == '3':
            level = "max"
    elif choice == 'q':
        is_running = False
    else:
        print("Invalid Input, Select again")
